/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'MoSect' at '18-3-18 上午9:48' with Gradle 3.2
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'application'
mainClassName = 'com.mosect.easygson.example.Main'

jar {
    manifest {
        attributes(
                "Manifest-Version": 1.0,
                "Main-Class": "com.mosect.easygson.example.Main")
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from('src/main/java') {
    	include 'test.json'
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile project(':library')
}
